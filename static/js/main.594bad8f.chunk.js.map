{"version":3,"sources":["ApiHelper.js","Store.js","CityReducer.js","components/FavoriteCity.js","components/CurrentCity.js","App.js","serviceWorker.js","index.js"],"names":["apiKey","weatherApiByCity","city","resolveToJson","fetch","mode","method","weatherPromise","then","response","e","console","log","a","json","ok","status","parseData","res","key","value","wind","speed","deg","weather","description","main","pressure","humidity","coord","lat","lon","persistentState","JSON","parse","localStorage","state","Store","createStore","action","type","concat","data","filter","el","subscribe","getState","stringify","FavoriteCity","props","render","className","temp","toFixed","src","icon","alt","onClick","event","preventDefault","dispatch","parsed","map","this","parsedData","setState","name","sys","country","React","Component","CurrentCity","currentPosition","coords","latitude","longitude","App","updateGeo","navigator","geolocation","getCurrentPosition","position","error","text","reason","componentDidMount","addCityToFavorite","errorTimeout","clearTimeout","setTimeout","undefined","favoriteCities","indexOf","cod","onSubmit","inputCity","current","ref","placeholder","createRef","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.594bad8f.chunk.js","sourcesContent":["const apiKey = \"689a901bd72a2a9653fbcdaea1ffafd5\";\r\n\r\nconst weatherApiByCity = (city) =>\r\n    resolveToJson(\r\n        fetch(\"https://api.openweathermap.org/data/2.5/weather?q=\" + city + \"&appid=\" + apiKey + \"&lang=ru\", {\r\n            mode: 'cors',\r\n            method: 'GET'\r\n        })\r\n    );\r\n\r\nconst weatherApiByCoords = (coords) =>\r\n    resolveToJson(\r\n        fetch(\r\n            \"https://api.openweathermap.org/data/2.5/weather?lat=\" + coords.latitude\r\n            + \"&lon=\" + coords.longitude + \"&appid=\" + apiKey + \"&lang=ru\",\r\n            {\r\n                mode: 'cors',\r\n                method: 'GET'\r\n            })\r\n    );\r\n\r\nconst resolveToJson = (weatherPromise) =>\r\n    weatherPromise.then(\r\n        (response) => {\r\n            return response;\r\n        },\r\n        (e) => {\r\n            console.log(e);\r\n        }\r\n    ).then(\r\n        async (response) => {\r\n            let json = await response.json().then((json) => {\r\n                return json;\r\n            });\r\n            if (response.ok) {\r\n                return {status: \"ok\", response: json}\r\n            } else {\r\n                return {status: \"fail\", response: json}\r\n            }\r\n        }\r\n    );\r\nconst parseData = (res) =>\r\n    [\r\n        {key: \"Ветер\", value: res.wind.speed + \" m/s\" + (res.wind.deg ? (\", \" + res.wind.deg + \"°\") : \"\")},\r\n        {key: \"Облачность\", value: res.weather[0].description},\r\n        {key: \"Давление\", value: res.main.pressure + \" hPa\"},\r\n        {key: \"Влажность\", value: res.main.humidity + \" %\"},\r\n        {key: \"Координаты\", value: res.coord.lat + \", \" + res.coord.lon},\r\n    ];\r\n\r\n\r\nexport {weatherApiByCity, weatherApiByCoords, parseData};\r\n","import {createStore} from 'redux'\r\nimport {CityReducer} from './CityReducer'\r\n\r\nconst _loadState = () => JSON.parse(localStorage.state || \"[]\");\r\nconst _storeState = (state) => localStorage.state = JSON.stringify(state);\r\n\r\nlet persistentState = _loadState();\r\nconst Store = createStore(CityReducer, persistentState);\r\nStore.subscribe(() => {\r\n    _storeState(Store.getState());\r\n});\r\n\r\nexport default Store;\r\n","export const CityReducer = (state, action) => {\r\n    switch (action.type) {\r\n        case \"addCity\":\r\n            return state.concat([action.data]);\r\n        case \"deleteCity\":\r\n            return state.filter(el => el !== action.data);\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import React from 'react';\r\nimport './FavoriteCity.css';\r\n\r\nimport {parseData, weatherApiByCity} from '../ApiHelper'\r\n\r\nimport Store from '../Store'\r\n\r\nclass FavoriteCity extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            city: props.city,\r\n            data: null\r\n        };\r\n    }\r\n\r\n    async componentDidMount() {\r\n        let data = await weatherApiByCity(this.props.city);\r\n        let res = data.response;\r\n        let parsedData = parseData(res);\r\n        this.setState({data: res, parsed: parsedData, city: res.name + \", \" + res.sys.country});\r\n    }\r\n\r\n    render = () => (\r\n        <div className=\"FavoriteCity\">\r\n            <div className=\"FC-container\">\r\n                <div className=\"FC-header\">\r\n                    <div className=\"FC-name\">\r\n                        {this.state.city}\r\n                    </div>\r\n                    {\r\n                        this.state.data ? <div className=\"FC-temperature\">\r\n                            <span className=\"FC-temp-data\">{(this.state.data.main.temp - 273.14).toFixed(1)}</span>\r\n                            <span className=\"FC-temp-units\">&deg;C</span>\r\n                        </div> : \"\"\r\n                    }\r\n                    {\r\n                        this.state.data ? <img className=\"FC-weather-icon\"\r\n                                               src={\"http://openweathermap.org/img/wn/\" +\r\n                                               this.state.data.weather[0].icon +\r\n                                               \".png\"}\r\n                                               alt=\"\"/> : \"\"\r\n                    }\r\n                    <button className=\"FC-remove-btn\"\r\n                            onClick={(event) => {\r\n                                event.preventDefault();\r\n                                Store.dispatch(\r\n                                    {\r\n                                        type: \"deleteCity\",\r\n                                        data: this.props.city\r\n                                    }\r\n                                )\r\n                            }}>\r\n                        X\r\n                    </button>\r\n                </div>\r\n                {\r\n                    this.state.data ? <div className=\"FC-data-lines\">\r\n                            {\r\n                                this.state.parsed.map((e) =>\r\n                                    <div key={e.key} className=\"FC-data-line\">\r\n                                        <div className=\"FC-data-line-key\">{e.key}</div>\r\n                                        <div className=\"FC-data-line-value\">{e.value}</div>\r\n                                    </div>\r\n                                )\r\n                            }\r\n                        </div>\r\n                        :\r\n                        <div className={\"FC-loader\"}>\r\n                            <div className={\"FC-loader-container\"}>\r\n                                <div className={\"FC-loader-element\"}/>\r\n                                <div className={\"FC-loader-element\"}/>\r\n                                <div className={\"FC-loader-element\"}/>\r\n                                <div className={\"FC-loader-element\"}/>\r\n                                <div className={\"FC-loader-element\"}/>\r\n\r\n                                <div className={\"FC-loader-element\"}/>\r\n                                <div className={\"FC-loader-element\"}/>\r\n                                <div className={\"FC-loader-element\"}/>\r\n                                <div className={\"FC-loader-element\"}/>\r\n                                <div className={\"FC-loader-element\"}/>\r\n                            </div>\r\n                        </div>\r\n                }\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FavoriteCity;\r\n","import React from 'react';\r\nimport './CurrentCity.css';\r\nimport {parseData, weatherApiByCoords} from \"../ApiHelper\";\r\n\r\nclass CurrentCity extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            currentPosition: props.currentPosition\r\n        };\r\n    }\r\n\r\n    async componentDidMount() {\r\n        let data = await weatherApiByCoords(this.state.currentPosition.coords);\r\n        let res = data.response;\r\n        let parsedData = parseData(res);\r\n        this.setState({data: res, parsed: parsedData, city: res.name + \", \" + res.sys.country});\r\n    }\r\n\r\n    render = () => (\r\n        <div className=\"CurrentCity\">\r\n            {\r\n                this.state.data &&\r\n                <div className=\"CC-left\">\r\n                    <div className=\"CC-name\">\r\n                        {this.state.city}\r\n                    </div>\r\n\r\n                    <div className=\"CC-main-block\">\r\n                        <img className=\"CC-weather-icon\" src={\"http://openweathermap.org/img/wn/\" +\r\n                        this.state.data.weather[0].icon +\r\n                        \"@2x.png\"} alt=\"\"/>\r\n                        <div className=\"CC-temperature\">\r\n                            <span className=\"CC-temp-data\">{(this.state.data.main.temp - 273.14).toFixed(1)}</span>\r\n                            <span className=\"CC-temp-units\">&deg;C</span>\r\n                        </div>\r\n\r\n                    </div>\r\n\r\n                </div>\r\n            }\r\n            {\r\n                this.state.parsed ?\r\n                    <div className=\"CC-right\">\r\n                        <div className=\"CC-data-lines\">\r\n                            {\r\n                                this.state.parsed.map((e) =>\r\n                                    <div key={e.key} className=\"CC-data-line\">\r\n                                        <div className=\"CC-data-line-key\">{e.key}</div>\r\n                                        <div className=\"CC-data-line-value\">{e.value}</div>\r\n                                    </div>\r\n                                )\r\n                            }\r\n                        </div>\r\n                    </div> : \"\"\r\n            }\r\n            {\r\n                this.state.data ? \"\"\r\n                    : <div className={\"CC-loader\"}>\r\n                        <div className={\"CC-loader-container\"}>\r\n                            <div className={\"CC-loader-element\"}/>\r\n                            <div className={\"CC-loader-element\"}/>\r\n                            <div className={\"CC-loader-element\"}/>\r\n                            <div className={\"CC-loader-element\"}/>\r\n                            <div className={\"CC-loader-element\"}/>\r\n\r\n                            <div className={\"CC-loader-element\"}/>\r\n                            <div className={\"CC-loader-element\"}/>\r\n                            <div className={\"CC-loader-element\"}/>\r\n                            <div className={\"CC-loader-element\"}/>\r\n                            <div className={\"CC-loader-element\"}/>\r\n                        </div>\r\n                    </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CurrentCity;\r\n","import React from 'react';\r\nimport './App.css';\r\n\r\nimport FavoriteCity from './components/FavoriteCity'\r\nimport CurrentCity from './components/CurrentCity'\r\n\r\nimport Store from './Store'\r\n\r\nimport {weatherApiByCity} from \"./ApiHelper\";\r\n\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            currentPosition: null,\r\n            favoriteCities: null\r\n        };\r\n        this.inputCity = React.createRef();\r\n\r\n        this.state.favoriteCities = Store.getState();\r\n        Store.subscribe(() => {\r\n            this.setState({favoriteCities: Store.getState()})\r\n        });\r\n    }\r\n\r\n    updateGeo = (e) => navigator.geolocation.getCurrentPosition(\r\n        (position) => {\r\n            this.setState({currentPosition: position})\r\n        },\r\n        (e) => {\r\n            this.setState({error: {text: \"Геолокация недоступна\", reason: \"geo\"}});\r\n            console.log(\"GeoAPI is not permitted\")\r\n        }\r\n    );\r\n\r\n    componentDidMount = () =>\r\n        this.updateGeo();\r\n\r\n    addCityToFavorite = async (city) => {\r\n        if (city === \"\") {\r\n            this.setState({error: {text: \"Задан пустой поисковый запрос\", reason: \"input\"}});\r\n            this.errorTimeout && clearTimeout(this.errorTimeout);\r\n            this.errorTimeout = setTimeout(() => {\r\n                this.setState({error: undefined});\r\n                this.errorTimeout = null;\r\n            }, 5000);\r\n            return false;\r\n        }\r\n\r\n        let data = await weatherApiByCity(city);\r\n        if (data.status === \"ok\") {\r\n            if (this.state.favoriteCities.indexOf(data.response.name) === -1) {\r\n                Store.dispatch({\r\n                    type: \"addCity\",\r\n                    data: data.response.name\r\n                });\r\n                return true;\r\n            } else {\r\n                this.setState({\r\n                    error: {\r\n                        text: \"Город \" + data.response.name + \" уже есть в избранных\",\r\n                        reason: \"input\"\r\n                    }\r\n                });\r\n                this.errorTimeout && clearTimeout(this.errorTimeout);\r\n                this.errorTimeout = setTimeout(() => {\r\n                    this.setState({error: undefined});\r\n                    this.errorTimeout = null;\r\n                }, 5000);\r\n            }\r\n\r\n        } else {\r\n            this.setState({\r\n                error: {\r\n                    text: data.response.cod === \"404\" ? \"Город \" + city + \" не найден\" : \"Неизвестная ошибка API\",\r\n                    reason: \"api\"\r\n                }\r\n            });\r\n            this.errorTimeout && clearTimeout(this.errorTimeout);\r\n            this.errorTimeout = setTimeout(() => {\r\n                this.setState({error: undefined});\r\n                this.errorTimeout = null;\r\n            }, 5000);\r\n        }\r\n        return false;\r\n    };\r\n\r\n    render = () => (\r\n        <div className=\"App\">\r\n            <div className=\"A-geo\">\r\n                <div className=\"A-geo-text\">Погода здесь</div>\r\n                {this.state.error === undefined || this.state.error.reason !== \"geo\" ?\r\n                    <button className=\"A-geo-update-btn\" onClick={this.updateGeo}>Обновить геолокацию</button> : \"\"}\r\n            </div>\r\n            {this.state.error && <div className=\"A-error-msg\">{this.state.error.text}</div>}\r\n            {this.state.currentPosition && <CurrentCity currentPosition={this.state.currentPosition}/>}\r\n            <div className=\"A-favorite\">\r\n                <div className=\"A-favorite-header\">\r\n                    <div className=\"A-favorite-header-text\">Избранное</div>\r\n                    <form className=\"A-favorite-header-add\" onSubmit={async (e) => {\r\n                        e.preventDefault();\r\n                        if (await this.addCityToFavorite(this.inputCity.current.value)) {\r\n                            this.inputCity.current.value = \"\";\r\n                        }\r\n                    }}>\r\n                        <input ref={this.inputCity} className=\"A-favorite-header-add-input\" type=\"text\"\r\n                               placeholder=\"Добавить новый город\"/>\r\n                        <input type=\"submit\" className=\"A-favorite-header-add-btn\" value=\"+\"/>\r\n                    </form>\r\n                </div>\r\n                <div className=\"A-favorite-list\">\r\n                    {\r\n                        this.state.favoriteCities &&\r\n                        this.state.favoriteCities.map(\r\n                            (e) => <FavoriteCity key={e} city={e}/>\r\n                        )\r\n                    }\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}